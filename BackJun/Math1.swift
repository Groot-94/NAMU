//
//  Math1.swift
//  BackJun
//
//  Created by NAMU on 2022/03/30.
//

import Foundation

/*
 제
 월드전자는 노트북을 제조하고 판매하는 회사이다. 노트북 판매 대수에 상관없이 매년 임대료, 재산세, 보험료, 급여 등 A만원의 고정 비용이 들며, 한 대의 노트북을 생산하는 데에는 재료비와 인건비 등 총 B만원의 가변 비용이 든다고 한다.
 
 예를 들어 A=1,000, B=70이라고 하자. 이 경우 노트북을 한 대 생산하는 데는 총 1,070만원이 들며, 열 대 생산하는 데는 총 1,700만원이 든다.
 
 노트북 가격이 C만원으로 책정되었다고 한다. 일반적으로 생산 대수를 늘려 가다 보면 어느 순간 총 수입(판매비용)이 총 비용(=고정비용+가변비용)보다 많아지게 된다. 최초로 총 수입이 총 비용보다 많아져 이익이 발생하는 지점을 손익분기점(BREAK-EVEN POINT)이라고 한다.
 
 A, B, C가 주어졌을 때, 손익분기점을 구하는 프로그램을 작성하시오.
 
 입력
 첫째 줄에 A, B, C가 빈 칸을 사이에 두고 순서대로 주어진다. A, B, C는 21억 이하의 자연수이다.
 
 출력
 첫 번째 줄에 손익분기점 즉 최초로 이익이 발생하는 판매량을 출력한다. 손익분기점이 존재하지 않으면 -1을 출력한다.
 */

func breakEvenPoint() {
    let n = readLine()!.split(separator: " ").map{Int($0)!}
    var result: Int
    if n[1] < n[2] {
        result = n[0]/(n[2]-n[1]) + 1
    } else {
        result = -1
    }
    print(result)
}

/*
 문제
 
 
 위의 그림과 같이 육각형으로 이루어진 벌집이 있다. 그림에서 보는 바와 같이 중앙의 방 1부터 시작해서 이웃하는 방에 돌아가면서 1씩 증가하는 번호를 주소로 매길 수 있다. 숫자 N이 주어졌을 때, 벌집의 중앙 1에서 N번 방까지 최소 개수의 방을 지나서 갈 때 몇 개의 방을 지나가는지(시작과 끝을 포함하여)를 계산하는 프로그램을 작성하시오. 예를 들면, 13까지는 3개, 58까지는 5개를 지난다.
 
 입력
 첫째 줄에 N(1 ≤ N ≤ 1,000,000,000)이 주어진다.
 
 출력
 입력으로 주어진 방까지 최소 개수의 방을 지나서 갈 때 몇 개의 방을 지나는지 출력한다.
 */

func honeycomb() {
    let n = Int(readLine()!)!
    var result = 0
    var count = 1
    
    while true {
        result += 1
        if count >= n {
            break
        }
        count += result * 6
    }
    print(result)
}

/*
 무한히 큰 배열에 다음과 같이 분수들이 적혀있다.
 
 1/1    1/2    1/3    1/4    1/5    …
 2/1    2/2    2/3    2/4    …    …
 3/1    3/2    3/3    …    …    …
 4/1    4/2    …    …    …    …
 5/1    …    …    …    …    …
 …    …    …    …    …    …
 이와 같이 나열된 분수들을 1/1 → 1/2 → 2/1 → 3/1 → 2/2 → … 과 같은 지그재그 순서로 차례대로 1번, 2번, 3번, 4번, 5번, … 분수라고 하자.

 X가 주어졌을 때, X번째 분수를 구하는 프로그램을 작성하시오.

 입력
 첫째 줄에 X(1 ≤ X ≤ 10,000,000)가 주어진다.

 출력
 첫째 줄에 분수를 출력한다.
 */

//1, 2, 4, 7, 11
//  1  2  3  4

//  1 3 6 10

func fountainFind() {
    let X = Int(readLine()!)!
    var sum = 0 // 전체 구간의 개수의 합
    var count = 1 // 구하고자하는 구간의 합
    var arr: [String] = []

    for i in 1...X {
        sum += i
        count += 1
        if sum >= X {
            break
        }
    }

    if count % 2 == 0 {
        for j in 1..<count {
            arr.append("\(count - j)/\(j)")
        }
    }else {
        for j in 1..<count {
            arr.append("\(j)/\(count - j)")
        }
    }
    let index = arr.count - (sum - X) - 1
    print("\(arr[index])")
}

/*
 문제
 땅 위에 달팽이가 있다. 이 달팽이는 높이가 V미터인 나무 막대를 올라갈 것이다.

 달팽이는 낮에 A미터 올라갈 수 있다. 하지만, 밤에 잠을 자는 동안 B미터 미끄러진다. 또, 정상에 올라간 후에는 미끄러지지 않는다.

 달팽이가 나무 막대를 모두 올라가려면, 며칠이 걸리는지 구하는 프로그램을 작성하시오.

 입력
 첫째 줄에 세 정수 A, B, V가 공백으로 구분되어서 주어진다. (1 ≤ B < A ≤ V ≤ 1,000,000,000)

 출력
 첫째 줄에 달팽이가 나무 막대를 모두 올라가는데 며칠이 걸리는지 출력한다.
 */

func upSnail() {
    let k = readLine()!.split(separator: " ").map{Int($0)}
    var day = 0
    if let A = k[0], let B = k[1], let V = k[2] {
        day = (V - B)/(A - B)
        if (V-B) % (A - B) != 0 {
            day += 1
        }
    }
    print(day)
}
